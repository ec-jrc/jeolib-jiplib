

* List of issues/functions to address (20170201) with decreasing order of priority:
  - Add UINT64 data type in Jim (PK)
  - Address those functions with pointer arguments (besides IMAGE * or IMAGE **): create list (PS), define desired behaviour at python level (PS-PK), and then solve (at interface file level?).
  - Confirm that arguments of overloaded methods with default argument values cannot be used as keys (PK)
  - Solve the problem related to ERROR_TYPE return in a functional call (refers to a memory leak and returned ERROR_TYPE * !!!) (PK)
  - Address mialib functions modifying GeoTransform/Projection: create list (PS) and then ad hoc procedure to be put in place.
  - Write a clone at jim level with memcpy to secure correct behaviour for all data types including Int64/UInt64 (PK)



* Done:
  - Automatic binding of functions returning an IMAGE * (see template in mean2d in jim.cc) (PS on 20170202)
  - Change malloc to calloc in createImg (PK)
  - Add binding of mialib functions in cmake (PK)
  - From and to numpy functions implemented (PK)
  - Problem related to ERROR_TYPE return in a functional call seems to be fixed (PK)
  - Handled ERRORTYPE functions that do not modify the input image (e.g., iminfo). They are treated as the destructive functions but without the prefix d_ (PK)
  - Added Int64 and UInt64 data type in Jim (PK)
  - Constructor written with copyData specific to Jim with memcopy (this also implements the clone) (PK)


  - ERROR_TYPE functions that do not modify the input image (e.g. iminfo) should not use the bool variable destructive: create list (PS)

extern ERROR_TYPE dumpxyz(IMAGE *im, int x, int y, int z, int dx, int dy);
extern ERROR_TYPE szcompat(IMAGE *im1, IMAGE *im2);
extern ERROR_TYPE szgeocompat(IMAGE *im1, IMAGE *im2);
extern ERROR_TYPE iminfo(IMAGE *im);
extern ERROR_TYPE tiffinfo(char *fn, char *field, float *val);
extern ERROR_TYPE writeGnuPlot3D(IMAGE **imap, int nc, int graph, int regionSize, int varianz, char *fileName);
extern ERROR_TYPE vectorizeImage(IMAGE **imap, int nc, char *filename, int format, double simplifyBorderLines);
extern ERROR_TYPE IsPartitionEqual(IMAGE *im1, IMAGE *im2, int *result);
extern ERROR_TYPE IsPartitionFiner(IMAGE *im1, IMAGE *im2, int graph, unsigned long int *res);
extern ERROR_TYPE dendro(IMAGE **imap, int nc, char *fn);
extern ERROR_TYPE getfirstmaxpos(IMAGE *im, unsigned long int *pos);
extern ERROR_TYPE volume(IMAGE *im);
extern ERROR_TYPE imequalp(IMAGE *im1, IMAGE *im2);
extern ERROR_TYPE getmax(IMAGE *im, double *maxval);
extern ERROR_TYPE getminmax(IMAGE *im, double *minval, double *maxval);
    
