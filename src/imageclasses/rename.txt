miallib_convolve.h:extern IMAGE *convolve(IMAGE *im, IMAGE *imse, IMAGE *imweight, int ox, int oy, int oz); convolve
miallib_convolve.h:extern IMAGE *convolvedownsample(IMAGE *im, IMAGE *imse, IMAGE *imweight, int w, int ox, int oy, int oz); convolveDownSample
miallib_convolve.h:extern IMAGE *rsum2d(IMAGE *im); runSum2d
miallib_convolve.h:extern IMAGE *rsum3d(IMAGE *im); runSum3d
miallib_convolve.h:extern IMAGE *rsumsq2d(IMAGE *im); runSumInSquareNgb
miallib_convolve.h:extern IMAGE *mean2d(IMAGE *im, int width); meanFilterInSquareNgb
miallib_convolve.h:extern IMAGE *mean2dse(IMAGE *im, IMAGE *imse, int ox, int oy); meanFilterIn2dNgb
miallib_convolve.h:extern IMAGE *variance2dse(IMAGE *im, IMAGE *imse, int ox, int oy); varianceFilterIn2dNgb
miallib_convolve.h:extern IMAGE *squarevol(IMAGE *im, int k, int ox, int oy); sumInSquareNgb
miallib_convolve.h:extern ERROR_TYPE azimuth(IMAGE *ix, IMAGE *iy); gradientAzimuth
miallib_convolve.h:extern ERROR_TYPE mapori(IMAGE *i0, int ox, int oy); orientationMap
miallib_convolve.h:extern IMAGE *phase_correlation(IMAGE *im, IMAGE *im_template); phaseCorrelation

miallib_dem.h:extern IMAGE *d8(IMAGE *im); demFlowDirectionD8
miallib_dem.h:extern IMAGE *slope8(IMAGE *im); demSlopeD8
miallib_dem.h:extern IMAGE *flow(IMAGE *imin, int graph); demFlow
miallib_dem.h:extern IMAGE *flownew(IMAGE *imin, IMAGE *imdir, int graph); demFlowNew
miallib_dem.h:extern IMAGE *cda(IMAGE *dir, int graph); demContributingDrainageArea
miallib_dem.h:extern IMAGE *stratify(IMAGE *cda, IMAGE *thresh, IMAGE *dir); demContributingDrainageAreaStratify
miallib_dem.h:extern IMAGE *dinf(IMAGE *im); demFlowDirectionDInf
miallib_dem.h:extern IMAGE *cdainf(IMAGE *dir); demContributingDrainageAreaDInf
miallib_dem.h:extern IMAGE *slopeinf(IMAGE *im); demSlopeDInf
miallib_dem.h:extern ERROR_TYPE dir(IMAGE *im, int graph); demFloodDirection
miallib_dem.h:extern ERROR_TYPE cboutlet(IMAGE *outlet, IMAGE *d8); demCatchmentBasinOutlet
miallib_dem.h:extern ERROR_TYPE cbconfluence(IMAGE *outlet, IMAGE *d8); demCatchmenBasinConfluence
miallib_dem.h:extern ERROR_TYPE strahler(IMAGE *d8); demStrahlerOrder
miallib_dem.h:extern IMAGE *aflood(IMAGE *iml, IMAGE *imr, int graph, int maxfl); demPitRemovalCarve
miallib_dem.h:extern IMAGE *fillocarve(IMAGE *iml, IMAGE *imr, int graph, int maxfl, int flag); demPitRemovalOptimal
miallib_dem.h:extern IMAGE *FlatDir(IMAGE *flat, IMAGE *im, int graph); demFlowDirectionFlat
miallib_dem.h:extern ERROR_TYPE FlatIGeodAFAB(IMAGE *flat, IMAGE *im, int graph); demFlowDirectionFlatGeodesic
miallib_dem.h:extern IMAGE *htop(IMAGE *dem, IMAGE *d8); demUpstreamMaxHeight
miallib_dem.h:extern IMAGE *shade(IMAGE *im, int dir); demShade
miallib_dem.h:extern IMAGE *LineDilate3D(IMAGE *im, float dh); demLineDilate3d

miallib_dist.h:extern ERROR_TYPE dst2d4(IMAGE *im); distance2d4
miallib_dist.h:extern ERROR_TYPE dst2dchamfer(IMAGE *im); distance2dChamfer57
miallib_dist.h:extern ERROR_TYPE chamfer2d(IMAGE *im, int type); distance2dChamfer
miallib_dist.h:extern IMAGE *edistfifo2d(IMAGE *im, int graph); distance2dEuclideanFifo
miallib_dist.h:extern IMAGE *sqedt(IMAGE *im); distance2dEuclideanSquared
miallib_dist.h:extern IMAGE *iz(IMAGE *im); distanceInfluenceZones2dEuclidean
miallib_dist.h:extern ERROR_TYPE oiiz(IMAGE *im); distanceInfluenceZones2dOrderedIndependent
miallib_dist.h:extern ERROR_TYPE geodist(IMAGE *im_m, IMAGE *im_r, int graph); distanceGeodesic
miallib_dist.h:extern IMAGE *ced(IMAGE *ref, IMAGE *mask); distance2dEuclideanConstrained

miallib_erodil.h:extern ERROR_TYPE linero(IMAGE *im, int dx, int dy, int n, int line_type); morphoErodeLine
miallib_erodil.h:extern ERROR_TYPE lindil(IMAGE *im, int dx, int dy, int n,int line_type); morphoDilateLine
miallib_erodil.h:extern ERROR_TYPE herkpldil(IMAGE *im, int dx, int dy, int k, int o, int t); morphoDilateLinePeriodic
miallib_erodil.h:extern ERROR_TYPE herkplero(IMAGE *im, int dx, int dy, int k, int o, int t); morphoErodeLinePeriodic
miallib_erodil.h:extern ERROR_TYPE erode4(IMAGE *im, int ox, int oy); morphoErodeNgb4
miallib_erodil.h:extern ERROR_TYPE dilate4(IMAGE *im, int ox, int oy); morphoDilateNgb4
miallib_erodil.h:extern IMAGE *erode(IMAGE *im, IMAGE *imse, int ox, int oy, int oz, int trflag); morphoErode
miallib_erodil.h:extern IMAGE *dilate(IMAGE *im, IMAGE *imse, int ox, int oy, int oz, int trflag); morphoDilate
miallib_erodil.h:extern IMAGE *volerode(IMAGE *im, IMAGE *imse, IMAGE *imweight, int ox, int oy, int oz); morphoErodeVolumic
miallib_erodil.h:extern IMAGE *rank(IMAGE *im, IMAGE *imse, int rank, int ox, int oy, int oz, int trflag); morphoRankFilter
miallib_erodil.h:extern IMAGE *squarerank(IMAGE *im, int k, int rank, int ox, int oy); morphoRankFilterSquare
miallib_erodil.h:extern ERROR_TYPE linerank(IMAGE *im, int dx, int dy, int k, int rank, int o); morphoRankFilterLine
miallib_erodil.h:extern IMAGE *lrankti(IMAGE *im, int dx, int dy, int k, int rank, int o, int t, int tr); morphoRankFilterLineTI
miallib_erodil.h:extern IMAGE *msgradlinf(IMAGE **imap, int nc, int graph); morphoGradientMultibandSquareNgb
miallib_erodil.h:extern IMAGE *msgradlinfngb(IMAGE **imap, int nc, IMAGE *imngb, int ox, int oy, int oz); morphoGradientMultiband2dNgb

miallib_format.h:extern IMAGE *to_tiff1bitpp(IMAGE *im); convertTo1bitPerPixel
miallib_format.h:extern IMAGE *to_tiff4bitpp(IMAGE *im); convertTo4bitPerPixel
miallib_format.h:extern IMAGE *to_ushort(IMAGE *im); convertToUint16
miallib_format.h:extern IMAGE *to_int32(IMAGE *im);  convertToInt32
miallib_format.h:extern IMAGE *to_float(IMAGE *im); convertToFloat32
miallib_format.h:extern IMAGE *to_double(IMAGE *im); convertToDouble64
miallib_format.h:extern ERROR_TYPE to_uchar(IMAGE *im); convertToUchar8
miallib_format.h:extern ERROR_TYPE dbltofloat(IMAGE *im); convertDouble64ToFloat32
miallib_format.h:extern ERROR_TYPE uint32_to_float(IMAGE *im); convertUint32toFloat32
miallib_format.h:extern ERROR_TYPE swap(IMAGE *im); convertSwapBytes
miallib_format.h:extern IMAGE *deinterleave(IMAGE *im); convertDeinterleave
miallib_format.h:extern IMAGE *imhsi2rgb(IMAGE *imh, IMAGE *ims, IMAGE *imi); convertHsiToRgb
miallib_format.h:extern IMAGE *imhls2rgb(IMAGE *imh, IMAGE *ims, IMAGE *imi); convertHlsToRgb
miallib_format.h:extern IMAGE **imrgb2hsx(IMAGE *imr, IMAGE *img, IMAGE *imb, int type); convertRgbToHsx
miallib_format.h:extern IMAGE *crgb2rgb(IMAGE *imh, IMAGE *ims, IMAGE *imi); convertRgbTo3d

miallib_geodesy.h:extern ERROR_TYPE rdil(IMAGE *mark, IMAGE *mask, int graph, int flag); geodesicReconstructionByDilation
miallib_geodesy.h:extern ERROR_TYPE rero(IMAGE *mark, IMAGE *mask, int graph, int flag); geodesicReconstructionByErosion
miallib_geodesy.h:extern ERROR_TYPE rerodilp(IMAGE *mark, IMAGE *mask, int graph, int flag, int version); geodesicReconstruction
miallib_geodesy.h:extern ERROR_TYPE complete(IMAGE *im_i, IMAGE *im_rmin, int graph); geodesicComplete
miallib_geodesy.h:extern IMAGE *minima(IMAGE *imin, int graph); getRegionalMinima
miallib_geodesy.h:extern ERROR_TYPE sqtgpla(IMAGE *im_m, IMAGE *im_r, int graph); geodesicTimeFlat
miallib_geodesy.h:extern ERROR_TYPE sqtg(IMAGE *im_m, IMAGE *im_r, int graph); geodesicTime
miallib_geodesy.h:extern IMAGE *sqtgsym(IMAGE *im_m, IMAGE *im_r, int graph); geodesicTimeSymmetric

miallib_geometry.h:extern ERROR_TYPE framebox(IMAGE *im, int *box, G_TYPE gval); imageFrameSet
miallib_geometry.h:extern ERROR_TYPE addframebox(IMAGE *im, int *box, G_TYPE gval); imageFrameAdd
miallib_geometry.h:extern ERROR_TYPE subframebox(IMAGE *im, int *box); imageFrameSubtract
miallib_geometry.h:extern ERROR_TYPE imputop(IMAGE *im1, IMAGE *im2, int x, int y, int z, int op); imageInsert
miallib_geometry.h:extern ERROR_TYPE imputcompose(IMAGE *im1, IMAGE *imlbl, IMAGE *im2, int x, int y, int z, int val); imageInsertCompose
miallib_geometry.h:extern IMAGE *imcut(IMAGE *im, int x1, int y1, int z1, int x2, int y2, int z2); imageCut
miallib_geometry.h:extern IMAGE *getboundingbox(IMAGE *im); getBoundingBoxNonZeroDomain
miallib_geometry.h:extern IMAGE *magnify(IMAGE *im, int n); imageMagnify
miallib_geometry.h:extern IMAGE **rotatecoor(IMAGE *im, double theta); imageRotateCoor
miallib_geometry.h:extern ERROR_TYPE szcompat(IMAGE *im1, IMAGE *im2); predicateSizeAndTypeEqual
miallib_geometry.h:extern ERROR_TYPE szgeocompat(IMAGE *im1, IMAGE *im2); predicateSizeEqual
miallib_geometry.h:extern ERROR_TYPE plotline(IMAGE *im, int x1, int y1, int x2, int y2, int val); plotLine
miallib_geometry.h:extern ERROR_TYPE ovlmatrix(IMAGE *matrix, IMAGE *maxg_array, char *odir); overlapMatrix

miallib_hmt.h:extern ERROR_TYPE skeleton(IMAGE *im); skeleton
miallib_hmt.h:extern ERROR_TYPE bprune(IMAGE *im, int occa, int graph); pruneBinary
miallib_hmt.h:extern IMAGE *epc(IMAGE *im, IMAGE *lut); extractPixelConfigurationBinary
miallib_hmt.h:extern IMAGE *epcgrey(IMAGE *im, IMAGE *lut); extractPixelConfigurationGrey
miallib_hmt.h:extern IMAGE *switchop(IMAGE *im, IMAGE *imse, int ox, int oy, int oz); switchOperator
miallib_hmt.h:extern ERROR_TYPE oiskeleton(IMAGE *im, IMAGE *imanchor); skeletonOrderIndependent
miallib_hmt.h:extern ERROR_TYPE oiask(IMAGE *im, IMAGE *imanchor); skeletonAnchored
miallib_hmt.h:extern ERROR_TYPE binODthin_noqueue(IMAGE *imin, int stype, int atype, IMAGE *imanchor); orderDependentThin
miallib_hmt.h:extern ERROR_TYPE binODthin_FIFO(IMAGE *imin, int stype, int atype, IMAGE *imanchor); orderDependentThinFifo
miallib_hmt.h:extern ERROR_TYPE binOIthin_noqueue(IMAGE *imin, int stype, int atype, IMAGE *imanchor); orderIndependentThin
miallib_hmt.h:extern ERROR_TYPE binOIthin_FIFO(IMAGE *imin, int stype, int atype, IMAGE *imanchor); orderIndependentThinFifo

miallib_imem.h:extern ERROR_TYPE iminfo(IMAGE *im); imageInfo
miallib_imem.h:extern IMAGE *create_image(int data_type, long int nx, int ny, int nz); imageCreate
miallib_imem.h:extern IMAGE *copy_image(IMAGE *im); imageCopy
miallib_imem.h:extern ERROR_TYPE copy_lut(IMAGE *im1, IMAGE *im2); imageLutCopy
miallib_imem.h:extern ERROR_TYPE create_lut(IMAGE *im); imageLutCreate
miallib_imem.h:extern void free_lut(IMAGE *im); imageLutFree
miallib_imem.h:extern IMAGE *imtoarray(IMAGE *im, IMAGE *imroi); imageToArray
miallib_imem.h:extern IMAGE *arraytoim(IMAGE *im, IMAGE *imroi); imageFromArray
miallib_imem.h:extern ERROR_TYPE FindPixWithVal(IMAGE *im, G_TYPE gval, unsigned long int *ofs); getFirstPixWithVal
miallib_imem.h:extern ERROR_TYPE dumpxyz(IMAGE *im, int x, int y, int z, int dx, int dy); imageDump
miallib_imem.h:extern ERROR_TYPE setpixval(IMAGE *im, unsigned long offset, G_TYPE g); setPixVal
miallib_imem.h:extern G_TYPE getpixval(IMAGE *im, unsigned long offset); getPixVal
miallib_imem.h:extern int GetImBitPerPixel(IMAGE *im); getBitsPerPixel

miallib_io.h:extern int GDAL2MIALDataType(int aGDALDataType);  probablyNotNeededInJIPLib
miallib_io.h:extern IMAGE *GDALInfoJIP(char *imfn); gdalInfo
miallib_io.h:extern IMAGE *GDALRead(char *imfn, int band, int nXOff, int nYOff, int nXSize, int nYSize, int nBufXSize, int nBufYSize); gdalRead
miallib_io.h:extern IMAGE *read_all(char *fn, int nx, int ny, int nz, int data_type, int header_size, int pc); readImageBinary
miallib_io.h:extern IMAGE *read_image(char *fn); readImage
miallib_io.h:extern IMAGE *read_image_to_type(char *fn, int data_type); readImageToType
miallib_io.h:extern ERROR_TYPE write_ColorMap_tiff(IMAGE *im, char *fn); writeColorMapTiff
miallib_io.h:extern ERROR_TYPE write_tiff(IMAGE *im, char *fn); writeTiff
miallib_io.h:extern ERROR_TYPE writeTiffOneStripPerLine(IMAGE *im, char *fn, char *desc); writeTiffOneStripPerLine
miallib_io.h:extern IMAGE *GetGeoKey(char *fname, char *keyname); gdalGetGeoKey
miallib_io.h:extern IMAGE *GetTIFFTagGeo(char *fn, char *tagname); gdalGetTiffTagGeo
miallib_io.h:extern IMAGE *read_image2(char *fn, int x, int y, int szx, int szy, int scale); readImageScale
miallib_io.h:extern IMAGE *readTiffSubset(char *fn, int x, int y, unsigned szx, unsigned szy); readTiffSubset
miallib_io.h:extern ERROR_TYPE tiffinfo(char *fn, char *field, float *val); tiffInfoFieldValue
miallib_io.h:extern IMAGE *tiffinfoJIP(char *fn); tiffInfo
miallib_io.h:extern ERROR_TYPE writeGeoTiffOneStripPerLine(IMAGE *im, char *fn, int PCSCode, double xoff, double yoff, double scale, unsigned short RasterType, int nodata_flag, int nodata_val, int metadata_flag, char *metadata_str); writeGeoTiff
miallib_io.h:extern ERROR_TYPE writeMBGeoTiffOneStripPerLine(IMAGE **imap, int nc, char *fn, int PCSCode, double xoff, double yoff, double scale, unsigned short RasterType, int nodata_flag, int nodata_val, int metadata_flag, char *metadata_str); writeMultibandGeoTiff

miallib_label.h:extern ERROR_TYPE label(IMAGE *im1, IMAGE *im2, int ox, int oy, int oz); labelBinary
miallib_label.h:extern ERROR_TYPE labelpixngb(IMAGE *im1, IMAGE *im2, int ox, int oy, int oz); labelPixNgb
miallib_label.h:extern ERROR_TYPE labelplat(IMAGE *im1, IMAGE *im2, int ox, int oy, int oz); labelFlatZones
miallib_label.h:extern ERROR_TYPE seededlabelplat(IMAGE *im1, IMAGE *im2, IMAGE *im3, int ox, int oy, int oz); labelFlatZonesSeeded
miallib_label.h:extern ERROR_TYPE seededplat(IMAGE *im1, IMAGE *im2, IMAGE *im3, int ox, int oy, int oz); flatZonesSeeded
miallib_label.h:extern ERROR_TYPE labelpix(IMAGE *im); labelPix
miallib_label.h:extern ERROR_TYPE resolveLabels(IMAGE *imlbl, IMAGE *imlut, IMAGE *imlutback, int graph); labelsResolve
miallib_label.h:extern ERROR_TYPE gorder(IMAGE *lbl, IMAGE *g, int n); labelsReorder
miallib_label.h:extern IMAGE *erodelabel(IMAGE *im, int graph); labelErode
miallib_label.h:extern ERROR_TYPE propagate(IMAGE *lbl, IMAGE *dst,  IMAGE **imap, int nc, int graph); propagate
miallib_label.h:extern ERROR_TYPE set_regions(IMAGE *ilbl, IMAGE *ival, int indic); labelsSet
miallib_label.h:extern ERROR_TYPE setregionsgraph(IMAGE *ilbl, IMAGE *ival, int indic, int graph); labelsSetGraph
miallib_label.h:extern ERROR_TYPE tessel_surface(IMAGE *im); labelsSetArea
miallib_label.h:extern ERROR_TYPE relabel(IMAGE *ilbl1, IMAGE *ilbl2, IMAGE *iarea2); labelRelabel
miallib_label.h:extern IMAGE *region_lut(IMAGE *ilbl, int graph, int type, int param1, int param2); labelsGetLut
miallib_label.h:extern IMAGE *region_lut_seq(IMAGE *ilbl, int graph, int type); labelsGetLutSeq
miallib_label.h:extern IMAGE *region_im_lut(IMAGE *ilbl, IMAGE *im, int graph, int type, float aval); labelsImageGetLut
miallib_label.h:extern IMAGE *contortion_lut(IMAGE *ilbl, int graph); labelsGetContortionLut
miallib_label.h:extern IMAGE *moments_lut_to_ellipse_lut(IMAGE **impq); momentsLutsToEllipseLuts
miallib_label.h:extern IMAGE *alphacc(IMAGE *dissx, IMAGE *dissy, int alpha); dissimToAlphaCCs
miallib_label.h:extern IMAGE *labelvertex(IMAGE *im, int alpha, int graph); vertexDegreeAlpha
miallib_label.h:extern IMAGE *vertexseparation(IMAGE *im, int graph, int type); vertexSeparation
miallib_label.h:extern IMAGE *labelvertexconnectedness(IMAGE *im, int alpha, int graph, int deg); labelVertexConnectedness
miallib_label.h:extern IMAGE *labelcc(IMAGE *im, IMAGE *imse, int ox, int oy, int oz, int rg, int rl); labelConstrainedCCs
miallib_label.h:extern IMAGE *labelccms(IMAGE **imap, int nc, IMAGE *imse, int ox, int oy, int oz, int r1, int r2); labelConstrainedCCsMultiband
miallib_label.h:extern IMAGE *labelccmi(IMAGE *im, IMAGE *immi, IMAGE *imse, int ox, int oy, int oz, int rg, int rl); labelConstrainedCCsMi
miallib_label.h:extern IMAGE *labelci(IMAGE *im, IMAGE *imse, int ox, int oy, int oz, int rl); labelConstrainedCCsCi
miallib_label.h:extern IMAGE *labelcims(IMAGE **imap, int nc, IMAGE *imse, int ox, int oy, int oz, int rl); labelStronglyCCsMultiband
miallib_label.h:extern IMAGE *labelccdissim(IMAGE *im, IMAGE *imh, IMAGE *imv, int rg, int rl); labelConstrainedCCsDissim
miallib_label.h:extern IMAGE *labelccvar(IMAGE *im, IMAGE *imse, int ox, int oy, int oz, int rg, int rl, double varmax); labelConstrainedCCsVariance
miallib_label.h:extern IMAGE *labelccmsdissim(IMAGE **imap, int nc, IMAGE *imh, IMAGE *imv, int rg, int rl); labelConstrainedCCsMultibandDissim
miallib_label.h:extern IMAGE *labelccattr(IMAGE *im, int graph, int rg, int rl); labelConstrainedCCsAttr
miallib_label.h:extern IMAGE **alphatree(IMAGE *dissx, IMAGE *dissy, int alphamax); alphaTreeDissimGet
miallib_label.h:extern IMAGE *alphatreeincattr(IMAGE **atree, IMAGE **attr0cc, int type); alphaTree
miallib_label.h:extern IMAGE *alphatreetoCCs(IMAGE **atree, IMAGE *imblbl, IMAGE *flaglut, int rule); alphaTreeToCCs
miallib_label.h:extern IMAGE *alphatreenextlevel(IMAGE **atree, IMAGE *crtprtlabel, int alpha); alphaTreeNextLevel
miallib_label.h:extern IMAGE *alphatreepersistencelut(IMAGE **atree); alphaTreeGetPersistenceLut
miallib_label.h:extern IMAGE *edgeweight(IMAGE *im, int dir, int type); edgeWeight
miallib_label.h:extern IMAGE *dissim(IMAGE **imap, int nc, IMAGE *mask, int type); dissimilarityMatrix
miallib_label.h:extern IMAGE *dbscan(IMAGE *dissim, double eps, int MinPts); dbscan
miallib_label.h:extern IMAGE *outeredgelut(IMAGE *ilbl, IMAGE *iedgelbl); labelsGetOuterEdgeLut
miallib_label.h:extern IMAGE *outeredge(IMAGE *ilbl, int graph); labelsGetOuterEdge
miallib_label.h:extern IMAGE *outercontour(IMAGE *ilbl, int graph); labelsGetOuterContour

miallib_miscel.h:extern IMAGE *dirmean(IMAGE *imx, IMAGE *imy, IMAGE *imse, int ox, int oy, int oz); orientationMean
miallib_miscel.h:extern IMAGE *coherence(IMAGE *imx, IMAGE *imy, IMAGE *imse, int ox, int oy, int oz); orientationCoherence
miallib_miscel.h:extern IMAGE *coor_extrema_paraboloid(IMAGE *b); paraboloidGetCoordinatesExtremum
miallib_miscel.h:extern IMAGE *fitlinear(IMAGE *xarray, IMAGE  *yarray); linearFit
miallib_miscel.h:extern IMAGE *transgrad(IMAGE *im, int graph); gradientTransition
miallib_miscel.h:extern double julian_date(short int year, short int month, short int day, double hour); julianDate

miallib_opclo.h:extern IMAGE *attribute(IMAGE *imliiar, int type, int oporclo, double lambdaVal, int graph); morphoOpeningAttribute
miallib_opclo.h:extern IMAGE *GreyAreaOpening(IMAGE *imliiar, int lambdaVal, int graph); morphoOpeningArea
miallib_opclo.h:extern IMAGE *GreyAreaClosing(IMAGE *imliiar, int lambdaVal, int graph); morphoClosingArea
miallib_opclo.h:extern IMAGE *GreyAreaOpeningROI(IMAGE *imliiar, int lambdaVal, int graph); morphoOpeningAreaROI
miallib_opclo.h:extern IMAGE *GreyAreaClosingROI(IMAGE *imliiar, int lambdaVal, int graph); morphoClosingAreaROI
miallib_opclo.h:extern IMAGE *chull(IMAGE *ilbl, int graph); convexHull
miallib_opclo.h:extern IMAGE *hpclose(IMAGE *im, int dx, int dy); morphoClosingHalfPlane
miallib_opclo.h:extern IMAGE *hpcloseti(IMAGE *im, int dx, int dy); morphoClosingHalfPlaneTI

miallib_pointop.h:extern ERROR_TYPE bitwise_op(IMAGE *im1, IMAGE *im2, int op); pointOpBitwise
miallib_pointop.h:extern ERROR_TYPE negation(IMAGE *im); pointOpNegation
miallib_pointop.h:extern ERROR_TYPE arith(IMAGE *im1, IMAGE *im2, int op);  pointOpArith
miallib_pointop.h:extern ERROR_TYPE arithcst(IMAGE *im, G_TYPE gt, int op);  pointOpArithCst
miallib_pointop.h:extern ERROR_TYPE imabs(IMAGE *im); pointOpAbs
miallib_pointop.h:extern ERROR_TYPE imsqrt(IMAGE *im); pointOpSqrt
miallib_pointop.h:extern ERROR_TYPE imlog(IMAGE *im); pointOpLog
miallib_pointop.h:extern ERROR_TYPE imatan(IMAGE *im); pointOpAtan
miallib_pointop.h:extern ERROR_TYPE imcos(IMAGE *im); pointOpCos
miallib_pointop.h:extern ERROR_TYPE imacos(IMAGE *im); pointOpAcos
miallib_pointop.h:extern ERROR_TYPE imsin(IMAGE *im); pointOpSin
miallib_pointop.h:extern ERROR_TYPE imasin(IMAGE *im); pointOpAsin
miallib_pointop.h:extern ERROR_TYPE thresh(IMAGE *im, G_TYPE gt1, G_TYPE gt2, G_TYPE gbg, G_TYPE gfg); pointOpThresh
miallib_pointop.h:extern ERROR_TYPE setlevel(IMAGE *im, G_TYPE gt1, G_TYPE gt2, G_TYPE gval); pointOpSetLevel
miallib_pointop.h:extern ERROR_TYPE modulo(IMAGE *im, int val); pointOpModulo
miallib_pointop.h:extern ERROR_TYPE complement(IMAGE *im); pointOpComplement
miallib_pointop.h:extern ERROR_TYPE power2p(IMAGE *im); pointOpPower2
miallib_pointop.h:extern ERROR_TYPE blank(IMAGE *im, G_TYPE gval); pointOpBlank
miallib_pointop.h:extern ERROR_TYPE shift(IMAGE *im, int val); pointOpBitShift
miallib_pointop.h:extern ERROR_TYPE setrange(IMAGE *im, G_TYPE gt1, G_TYPE gt2); pointOpSetRange
miallib_pointop.h:extern IMAGE *ndi(IMAGE *im1, IMAGE *im2; pointOpNDI

miallib_proj.h:extern IMAGE *grid(IMAGE *im, IMAGE *roi, IMAGE *imx, IMAGE *imy, float alpha); gridding
miallib_proj.h:extern IMAGE **cs2cs(double ulc_e, double ulc_n, int nx, int ny, double res, char *parmsi[], int ni, char *parmso[], int no); cs2cs

miallib_segment.h:extern IMAGE *ws(IMAGE *im, int graph); segmentationWatershed
miallib_segment.h:extern ERROR_TYPE wsfah(IMAGE *iml, IMAGE *imr, int graph, int maxfl); segmentationWatershedFAH
miallib_segment.h:extern ERROR_TYPE skelfah(IMAGE *iml, IMAGE *imr, IMAGE *imdir, int graph, int maxfl); skeletonFah
miallib_segment.h:extern ERROR_TYPE skelfah2(IMAGE *imc, IMAGE *impskp, int n, int graph); skeletonFah2
miallib_segment.h:extern ERROR_TYPE compose(IMAGE *mark, IMAGE *mask, IMAGE *g, IMAGE *lbl, int graph); compose
miallib_segment.h:extern ERROR_TYPE oiws(IMAGE *im); segmentationWatershedOrderIndependent
miallib_segment.h:extern ERROR_TYPE srg(IMAGE *im1, IMAGE *im2, IMAGE *im3, int ox, int oy, int oz); segmentationSeededRegionGrowing
miallib_segment.h:extern ERROR_TYPE mssrg(IMAGE **imap, int nc, IMAGE *im2, IMAGE *im3, int ox, int oy, int oz); segmentationSeededRegionGrowingMultiband
miallib_segment.h:extern ERROR_TYPE mssrgcore(IMAGE **imap, int nc, IMAGE *im2, IMAGE *im3, int ox, int oy, int oz); segmentationSeededRegionGrowingCore
miallib_segment.h:extern IMAGE *labelImage(IMAGE **imap, int nc, IMAGE *labelIm, int graph, long int lambda); labelQuasiFlatZones
miallib_segment.h:extern ERROR_TYPE mcisrg(IMAGE **imap, int nc, IMAGE *seedsIm, int graph, long int regionNumber, int version); segmentationSeededRegionGrowingIterativeMultiband
miallib_segment.h:extern IMAGE *segmentImage(IMAGE **imap, int nc, int graph, int varianz, long int regionSize, int contrast, int version, char *fndat); segmentImageMultiband
miallib_segment.h:extern ERROR_TYPE writeGnuPlot3D(IMAGE **imap, int nc, int graph, int regionSize, int varianz, char *fileName); writeGnuPlot3D
miallib_segment.h:extern ERROR_TYPE vectorizeImage(IMAGE **imap, int nc, char *filename, int format, double simplifyBorderLines); vectorizeImage
miallib_segment.h:extern ERROR_TYPE IsPartitionEqual(IMAGE *im1, IMAGE *im2, int *result); predicatePartitionEqual
miallib_segment.h:extern ERROR_TYPE IsPartitionFiner(IMAGE *im1, IMAGE *im2, int graph, unsigned long int *res); predicatePartitionFiner
miallib_segment.h:extern IMAGE **imgc(IMAGE *imlbl); imgc
miallib_segment.h:extern ERROR_TYPE dendro(IMAGE **imap, int nc, char *fn); dendrogram
miallib_segment.h:extern IMAGE **PartitionSimilarity(IMAGE *part1, IMAGE *part2, int graph); partitionSimilarity
miallib_segment.h:extern IMAGE *segmentBinaryPatterns(IMAGE *imin, float size, int graphfg, int transition, int internal); segmentBinaryPatterns

miallib_stats.h:extern IMAGE *histo1d(IMAGE *im); histo1d
miallib_stats.h:extern IMAGE *histo2d(IMAGE *im1, IMAGE *im2); histo2d
miallib_stats.h:extern IMAGE *histo3d(IMAGE *im1, IMAGE *im2, IMAGE *im3); histo3d
miallib_stats.h:extern IMAGE *rsum(IMAGE *im); histo1dCumulative
miallib_stats.h:extern IMAGE *lookuprgb(IMAGE *imr, IMAGE *img, IMAGE *imb, IMAGE *imlut); applyLUT3d
miallib_stats.h:extern IMAGE *class2d(IMAGE *im1, IMAGE *im2, IMAGE *imlut); applyLUT2d
miallib_stats.h:extern IMAGE *area(IMAGE *im, int r, int type); surfaceArea
miallib_stats.h:extern IMAGE *dirsum(IMAGE *im, int dir); runSumDir
miallib_stats.h:extern G_TYPE *min_max(IMAGE *im); getMiaMinMax
miallib_stats.h:extern ERROR_TYPE getfirstmaxpos(IMAGE *im, unsigned long int *pos); getFirstMaxOffset
miallib_stats.h:extern ERROR_TYPE histcompress(IMAGE *im); histoCompress
miallib_stats.h:extern ERROR_TYPE lookup(IMAGE *im, IMAGE *imlut); applyLUT1d
miallib_stats.h:extern ERROR_TYPE lookuptypematch(IMAGE *im, IMAGE *imlut); applyLUT1dTypeMatch
miallib_stats.h:extern ERROR_TYPE volume(IMAGE *im); getSum
miallib_stats.h:extern ERROR_TYPE dirmax(IMAGE *im, int dir); propagateMaxDir
miallib_stats.h:extern ERROR_TYPE imequalp(IMAGE *im1, IMAGE *im2); predicateIdentity
miallib_stats.h:extern ERROR_TYPE getmax(IMAGE *im, double *maxval); getMax
miallib_stats.h:extern ERROR_TYPE getminmax(IMAGE *im, double *minval, double *maxval); getMiaMinMax
miallib_stats.h:extern IMAGE **histrgbmatch(IMAGE *cdf_rgb_src, IMAGE *cdf_rg_tgt, IMAGE *cdf_rb_tgt, IMAGE *cdf_gb_tgt); histoMatchRgb
miallib_stats.h:extern IMAGE **histrgb3dmatch(IMAGE *cdf_rgb_src, IMAGE *cdf_rg_tgt, IMAGE *cdf_rb_tgt, IMAGE *cdf_gb_tgt); histoMatch3dRgb
miallib_stats.h:extern ERROR_TYPE mblincomb(IMAGE **imap, int nc, IMAGE *matrix); linearCombinationMultiband
miallib_stats.h:extern ERROR_TYPE condmean(IMAGE **imap, int nc); meanConditional
miallib_stats.h:extern IMAGE *sortindex(IMAGE *i0); sortIndex
miallib_stats.h:extern ERROR_TYPE classstatsinfo(IMAGE *immos, IMAGE *imin); classStatsInfo
miallib_stats.h:extern ERROR_TYPE clmindist(IMAGE *immos, IMAGE *imin, int bklabel, int mode, double thr); classMinDst
miallib_stats.h:extern ERROR_TYPE clparpip(IMAGE *immos, IMAGE *imin, int bklabel, int mode, double mult); classBox
miallib_stats.h:extern ERROR_TYPE clmaha(IMAGE *immos, IMAGE *imin, int bklabel, int mode, double thr); classMahanalobis
miallib_stats.h:extern ERROR_TYPE clmaxlike(IMAGE *immos, IMAGE *imin, int bklabel, int type, double thr); classMaximumLikelihood
miallib_stats.h:extern IMAGE *ssda(IMAGE *imin, IMAGE *imt, int xi, int yi, int w); similarityDetectionSequential
miallib_stats.h:extern IMAGE *ncclewis(IMAGE *imin, IMAGE *imt, IMAGE *sim, IMAGE *ssqim, int xi, int yi, int w); crosscorrNormalisedLewis
miallib_stats.h:extern IMAGE *ncc(IMAGE *imin, IMAGE *imt, int xi, int yi, int w); crosscorrNormalised
